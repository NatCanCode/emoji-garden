{"version":3,"sources":["Button/Button.jsx","Garden/Garden.jsx","App/App.jsx","index.js"],"names":["Button","props","react_default","a","createElement","className","onClick","handleClick","Garden","garden","map","elem","deletePlant","id","emoji","src_Button_Button","addPlant","App","_this","Object","classCallCheck","this","_super","call","generateGarden","size","tab","i","push","getNumberOfEmojis","state","filter","length","growGarden","newGarden","toConsumableArray","find","setState","setTimeout","console","log","Fragment","src_Garden_Garden","React","Component","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"iNAaeA,eAVA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOC,QAAS,WAC9BL,EAAMM,gBADV,oBCgBOC,EAfA,SAACP,GAGZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZJ,EAAMQ,OAAOC,IAAI,SAACC,GACjB,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMW,YAAYD,EAAKE,MAAMF,EAAKG,UAGlFZ,EAAAC,EAAAC,cAACW,EAAD,CAAQR,YAAaN,EAAMe,aCyEpBC,oDAlFX,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAI,EAAAC,KAAAF,KAAMpB,IAIVuB,eAAiB,SAACC,GAEd,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAIF,EAAME,IACrBD,EAAIE,KAAK,CAACf,GAAIc,EAAGb,MAAO,KAE5B,OAAOY,GAVQR,EAwBnBW,kBAAoB,WAEhB,OADqBX,EAAKY,MAAMrB,OAAOsB,OAAO,SAACpB,GAAD,MAAyB,KAAfA,EAAKG,QACvCkB,QA1BPd,EA6BnBF,SAAW,WAGP,GAFAE,EAAKe,aAEDf,EAAKW,qBAAuB,GAAI,CAEhC,IAAIK,EAASf,OAAAgB,EAAA,EAAAhB,CAAOD,EAAKY,MAAMrB,QAC/ByB,EAAUE,KAAK,SAACzB,GAAD,MAAyB,KAAfA,EAAKG,QAAeA,MAAQ,eAErDI,EAAKmB,SAAS,CAAC5B,OAAQyB,MArCZhB,EAyCnBe,WAAa,WACT,IAAIC,EAASf,OAAAgB,EAAA,EAAAhB,CAAOD,EAAKY,MAAMrB,QAC/ByB,EAAUxB,IAAI,SAACC,GACb,MAAmB,iBAAfA,EAAKG,MAAwBH,EAAKG,MAAQ,eACtB,iBAAfH,EAAKG,MAAwBH,EAAKG,MAAQ,eACvCH,EAAKG,QAEnBI,EAAKmB,SAAS,CAAE5B,OAAQyB,IAIpBhB,EAAKY,MAAMrB,OAAOuB,OAAS,GAC7BM,WAAW,WACTpB,EAAKe,cACJ,MAvDUf,EA2DnBN,YAAc,SAACC,GAEX,IAAIqB,EAASf,OAAAgB,EAAA,EAAAhB,CAAOD,EAAKY,MAAMrB,QAC/ByB,EAAUrB,GAAIC,MAAQ,GACtBI,EAAKmB,SAAS,CAAC5B,OAAQyB,KA7DvBhB,EAAKY,MAAQ,CAACrB,OAAQ,IAFPS,uDAcnB,WAEIG,KAAKgB,SAAS,CAAC5B,OAAQY,KAAKG,eADT,wCAKvB,WACIe,QAAQC,IAAI,qBAAsBnB,KAAKQ,2CA6C3C,WACI,OACI3B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACIvC,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACsC,EAAD,CACIjC,OAAQY,KAAKS,MAAMrB,OACnBO,SAAUK,KAAKL,SACfJ,YAAaS,KAAKT,cAGtBV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAlB,8CA7EEsC,IAAMC,WCDxBC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAAQC,SAASC,eAAe","file":"static/js/main.cdfdb85e.chunk.js","sourcesContent":["import React from 'react'\n// import '.Button.css'\n\nconst Button = (props) => {\n    return(\n        <button className=\"flex\" onClick={() => {\n            props.handleClick()\n            // console.log(\"Hi\")\n        }}>Plant an Emoji</button>\n    )\n}\n\n\nexport default Button;","import React from 'react'\n// import { render } from 'react-dom'\nimport \"./Garden.css\"\nimport Button from \"../Button/Button\"\n\n\nconst Garden = (props) => {\n  // const row = props.garden.map((plant, index) =>\n    // <div key={index}>{plant}</div>\n    return (\n      <div className=\"container\">\n        <div className=\"grid\">\n          {props.garden.map((elem) => {\n            return <div className=\"cell\" onClick={() => props.deletePlant(elem.id)}>{elem.emoji}</div>\n          })}\n        </div>\n        <Button handleClick={props.addPlant}/>\n      </div>\n    )\n}\n\nexport default Garden;\n\n// You will create an App component that's rendered at the root node.\n\n// At this step, your App component should contain a state called garden.\n// garden will be an array of 25 values (because we have a 5x5 grid!) representing the cells of the garden.\n\n// Adding an emoji will therefore be equivalent to changing the garden state by changing the appropriate value in the array.\n\n// What those values are is up to you. Each cell can be a string, a boolean, an intâ€¦ what matters is that you can have a value that encodes the absence/presence of an emoji.\n","import React from 'react'\nimport './App.css'\nimport Garden from '../Garden/Garden'\nimport Button from '../Button/Button'\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {garden: []}\n    }\n\n    generateGarden = (size) => {\n        let tab = []\n        for(let i = 0; i < size; i++) {\n            tab.push({id: i, emoji: \"\"})\n        }\n        return tab\n    }\n\n    // prevent endless loop\n    componentDidMount() {\n        const sizeGarden = 25\n        this.setState({garden: this.generateGarden(sizeGarden)})\n    }\n\n    // check synchronicity/state\n    componentDidUpdate() {\n        console.log(\"Number of emojis: \", this.getNumberOfEmojis())\n    }\n\n    getNumberOfEmojis = () => {\n        let numberOfEmojis = this.state.garden.filter((elem) => elem.emoji !== \"\")\n        return numberOfEmojis.length\n    }\n\n    addPlant = () => {\n        this.growGarden()\n        // condition: prevent error when garden is full\n        if (this.getNumberOfEmojis() <= 24) {\n            // clone garden and change newGarden value to index = count\n            let newGarden = [...this.state.garden] // :warning: syntaxe pour rÃ©cupÃ©rer les rÃ©fÃ©rences et non juste les valeurs \n            newGarden.find((elem) => elem.emoji === \"\" ).emoji = \"ðŸŒ±\"\n            // update the state \n            this.setState({garden: newGarden})\n            }\n        }\n\n    growGarden = () => {\n        let newGarden = [...this.state.garden]\n        newGarden.map((elem) => {\n          if (elem.emoji === \"ðŸŒ±\") return (elem.emoji = \"ðŸŒ¿\")\n          else if (elem.emoji === \"ðŸŒ¿\") return (elem.emoji = \"ðŸŒ³\")\n          else return elem.emoji\n        });\n        this.setState({ garden: newGarden })\n    \n        // ici on appelle setTimeout en boucle dÃ¨s que growGarden a Ã©tÃ© executÃ© (c'est un trick pour la rÃ©pÃ©ter toutes les 2sec)\n        // NB: Ã  optimiser...car trop rapide encore\n        if (this.state.garden.length > 0) {\n          setTimeout(() => {\n            this.growGarden()\n          }, 9000);\n        }\n      };\n\n    deletePlant = (id) => {\n        // clicking on an existing emoji will delete it from the garden grid\n        let newGarden = [...this.state.garden]\n        newGarden[id].emoji = \"\"\n        this.setState({garden: newGarden})\n    }\n\n    render() {\n        return (\n            <>\n                <h1>My Emoji Garden</h1>\n                <Garden \n                    garden={this.state.garden}\n                    addPlant={this.addPlant}\n                    deletePlant={this.deletePlant}\n                />\n                {/* <button className=\"addGarden\">Add Garden</button> */}\n                <footer className=\"copyright\">Â© 2021 - Made with ðŸ’š</footer>\n            </>\n        )\n    }\n}\n\nexport default App\n\n\n/* <div>ðŸŒ±</div> / sprout */\n/* <div>ðŸŒ¿</div> / plant */\n/* <div>ðŸŒ³</div> / tree */\n","import React from 'react'\nimport ReactDOM from \"react-dom\"\nimport App from './App/App'\n\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}